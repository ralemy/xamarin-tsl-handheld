using System;
using System.Threading.Tasks;
using GalaSoft.MvvmLight.Messaging;
using TechnologySolutions.Rfid.AsciiProtocol;
using TechnologySolutions.Rfid.AsciiProtocol.Commands;
using TechnologySolutions.Rfid.AsciiProtocol.Extensions;

namespace Tsl.Core
{
	public class ReaderService
	{
		private readonly IAsciiSerialTransportConsumer _consumer;
		private readonly IAsciiCommander _commander;
		private readonly IReaderConnectionManager _connection;
		private readonly TslReaderInfo _info;
		private readonly ITagMonitor _tagMonitor;
		private readonly IBarcodeMonitor _barcodeMonitor;


		public INamedReader ConnectedReader
		{
			get { return _connection.ConnectedReader; }
		}

		public TslReaderInfo ReaderInfo
		{
			get { return ConnectedReader == null ? null : _info; }
		}


		public SwitchConfig SwitchConfig { get; private set; }
		public void Configure(SwitchConfig config)
		{
			var command = new SwitchActionCommand();
			config.Configure(command);
			_commander.Execute(command);
		}


		public InventoryConfig InventoryConfig { get; private set; }
		public async Task Configure(InventoryConfig config)
		{
			var command = new InventoryCommand();
			config.Configure(command);
			await Task.Run(() =>
			{
				try
				{
					_commander.Execute(command);
				}
				catch (Exception ex)
				{
					LogException(ex.Message);
				}
			});
		}
		public void GetInventory(InventoryConfig config)
		{
			var command = new InventoryCommand();
			config.Configure(command);
			command.TakeNoAction = false;
			_tagMonitor.OnTagReceived(command);
			_commander.Execute(command);
		}


		public BarcodeConfig BarcodeConfig { get; private set; }
		public void Configure(BarcodeConfig config)
		{
			var command = new BarcodeCommand();
			config.Configure(command);
			_commander.Execute(command);

		}
		public void GetBarcode(BarcodeConfig config)
		{
			var command = new BarcodeCommand();
			config.Configure(command);
			command.TakeNoAction = false;
			_barcodeMonitor.OnBarcodeReceived(command);
			_commander.Execute(command);
		}


		void LogException(string message)
		{
			//ToDo: Log the message generated by the background task.
		}


		public void RegisterForConnectionEvents(object recipient, Action<GenericMessage<TslReaderInfo>> handler)
		{
			Messenger.Default.Register(recipient, handler);
		}
		public void UnregisterFromConnectionEvents(object recipient)
		{
			Messenger.Default.Unregister<GenericMessage<TslReaderInfo>>(recipient);
		}



		public void RegisterTagListener(EventHandler<TagData> handler)
		{
			_tagMonitor.TagReceivedHandler += handler;
		}
		public void UnRegisterTagListener(EventHandler<TagData> handler)
		{
			_tagMonitor.TagReceivedHandler -= handler;
		}



		public void RegisterBarcodeListener(EventHandler<BarcodeData> handler)
		{
			_barcodeMonitor.BarcodeReceivedHandler += handler;
		}
		public void UnRegisterBarcodeListener(EventHandler<BarcodeData> handler)
		{
			_barcodeMonitor.BarcodeReceivedHandler -= handler;
		}


		public ReaderService(
			IReaderConnectionManager readerConnectionManager,
			IAsciiSerialTransportConsumer consumer,
			TslReaderInfo readerInfo,
			SwitchAsynchronousResponder switchResponder,
			SwitchConfig switchConfig,
			ITagMonitor tagMonitor,
			BarcodeConfig barcodeConfig,
			IBarcodeMonitor barcodeMonitor,
			InventoryConfig config)
		{
			_consumer = consumer;
			_commander = consumer as IAsciiCommander;
			_connection = readerConnectionManager;
			_info = readerInfo;
			_tagMonitor = tagMonitor;
			_barcodeMonitor = barcodeMonitor;
			SwitchConfig = switchConfig;
			InventoryConfig = config;
			BarcodeConfig = barcodeConfig;

			_connection.ConnectionStateChanged += ConnectionStateChanged;
			switchResponder.SwitchStateChanged += (sender, e) =>
				switchConfig.SwitchStateChanged?.Invoke(this, e);
		}

		void ConnectionStateChanged(object sender, EventArgs e)
		{
			//ToDo: also restore Inventory and Switch Configs when readers connect or disconnect

			if (_connection.ConnectionState == ReaderConnectionState.Disconnecting)
				DisconnectFromReader();
			else
				ConnectToReader();
		}


		void DisconnectFromReader()
		{
			if (_consumer.Transport != null)
				Messenger.Default.Send(new GenericMessage<TslReaderInfo>(null));
			_consumer.Transport = null;
		}

		void ConnectToReader()
		{
			_consumer.Transport = _connection.ConnectionTransport;
			if (_connection.ConnectedReader != null)
				SetReader(new VersionInformationCommand(), 0);
		}

		bool SetReader(VersionInformationCommand version, int tries)
		{

			if (tries > 2)
				return false;

			_commander.Execute(new AbortCommand());
			_commander.Execute(new FactoryDefaultsCommand());
			_commander.Execute(version);

			if (!version.Response.IsSuccessful)
				return SetReader(new VersionInformationCommand(), tries + 1);

			_info.Update(version);
			Messenger.Default.Send(new GenericMessage<TslReaderInfo>(_info));
			return true;
		}

	}
}
